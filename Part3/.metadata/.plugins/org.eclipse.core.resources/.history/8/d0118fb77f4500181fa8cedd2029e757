import info.gridworld.actor.Actor;
import info.gridworld.grid.Grid;
import info.gridworld.grid.Location;
import info.gridworld.actor.Rock;
import java.awt.Color;

public class Jumper extends Actor
{
    private int steps;
    private int sideLength;
    private static int maxJump = 2;
    /**
     * use two parameter to describe the jumping message.
     * @param jumpnum how many jump the Jumper do in this move (most is 2 now)
     */
    private int jumpnum;
    /**
     * Constructs a Jumper that traces a square of a given side length
     * @param length the side length
     */
    public Jumper(int length)
    {
        steps = 0;
        sideLength = length;
        jumpnum = 0;
        setColor(Color.RED);
    }

    /**
     * Use jump
     * If the jumper can jump, it jump
     * If the jumper can't jump, it rotate to another direction.
     */
    public void act()
    {   
    	if(jumpnum == maxJump)
    	{
    		jumpnum = 0;
    		steps ++;
    	}
    	System.out.println("\n\n");
    	System.out.println("jumpnum="+jumpnum+" steps="+steps+" sideLength = "+sideLength);
    	System.out.println("can jump = "+canJump());
        if(steps<sideLength && canJump())
        {
        	System.out.println("can jump");
        	jump();
        	jumpnum++;
        }
        else
        {
        	System.out.println("can't jump");
        	turn();
        	steps = 0;
        }
    }
    
    private boolean judgeRock(Grid<Actor> gr,Location loc)
    {
    	Actor ele = gr.get(loc);
    	return (ele instanceof Rock);
    	
    }
    
    private void jump()
    {
    	System.out.println("in the function jump");
    	Grid<Actor> gr = getGrid();
    	if(gr == null)
    		return;
    	Location loc = getLocation();
    	Location next = loc.getAdjacentLocation(getDirection());
    	Location far = next.getAdjacentLocation(getDirection());
    	if(gr.isValid(next)&&!judgeRock(gr,next))
    	{
    		System.out.println("move to next");
    		moveTo(next);
    	}
    	else if((!gr.isValid(next)||judgeRock(gr,next))&& gr.isValid(far) && !judgeRock(gr,far))
    	{
    		System.out.println("move to far");
    		moveTo(far);
    	}
    	else
    	{
    		removeSelfFromGrid();
    	}
    }
    
    private void turn()
    {
    	setDirection(getDirection()+Location.HALF_RIGHT);
    }
    
    private boolean canJump()
    {
    	System.out.println("in the function canJump");
    	Grid<Actor> gr = getGrid();
    	if(gr == null)
    		return false;
    	Location loc = getLocation();
    	Location next = loc.getAdjacentLocation(getDirection());
    	Location far = next.getAdjacentLocation(getDirection());
    	System.out.println("loc"+loc.toString());
    	System.out.println("next"+next.toString());
    	System.out.println("far"+far.toString());
    	if(!gr.isValid(next)&&!gr.isValid(far))
    		return false;
    	System.out.println("valid!");
    	Actor neighbor;
    	if(gr.isValid(next))
    	{
    		neighbor = gr.get(next);
    		System.out.println("next is valid");
    	}
    	else
    	{
    		neighbor = gr.get(far);
    		System.out.println("far is valid");
    	}
    	if(neighbor == null)
    	{
    		System.out.println("neighbor is null");
    	}
    	else
    	{
    		System.out.println(neighbor.toString());
    	}
    	return (neighbor != null);
    }
}
